Server design and implementation notes
======================================

                 Louis Delacroix, 2011


1. Language and libraries

The server is written in C++0x. I am currently using GCC 4.4 on Linux.

The code makes extensive use of the STL and Boost (components "system" and "program_options").
Further libraries are:

  - zlib:         as required by the protocol
  - libnoise:     for map generation
  - cNBT:         for serializing NBT data
  - GNU Readline: optional for the console UI

It should be possible to compile the server for any platform that supports
Boost, zlib and libnoise.


2. Server design

The server is essentially event-driven. There are only two possible events
that need to be considered:

   1. Ingress data from the client
   2. Timer events (regularly scheduled tasks)

This is implemented via multithreading (<thread> and co.). The program must
start three threads: one to handle Boost's ASIO, one to process the raw
ingress data and inform the game state, and one to run timed tasks.

The classes are roughly like this:


                             +----->              runIO()  (Done by Boost)
            Server ----------+-----> runInputProcessing()  (cf. InputParser)
               |             +-----> runTimerProcessing()
               |
               +--------------------+---------------+
               |                    |               |
               V                    V               V
       ConnectionManager    GameStateManager      Map
               |                    |  |           |
        ^      |  +-----------------+  +===<===>===+
ingress |      V  V      egress           update 
        +-Connection
          Connection
          Connection
             ...


3. Source code style

Yes, I would like to stick to a strict source code formatting style.
The style is half informed by my Emacs default settins and by immitation
of the mineserver style. Please contact me if anything is ambiguous or missing.

- Class and struct names "UpperCamelCase", (member) functions "lowerCamelCase",
  (member) objects "with_under_scores", private member object start with "m_".

- Pointer and reference type markers (*, &) with two-sided spacing, "int * x, double & y".

- Brackets: function like this: void foo(int a, double & b)
            control structures with space: while (x < 0), for(auto i = ... )

- Binary operators surrounded by spaces, "a + b".

- Unary operators without spaces; "++i", "&buf", "*ref".

- Indentation: two spaces per level, no tabs. Braces on a separate line, like so:

  for(int a = 0; ; )
  {
    if (b)
    {
      /* nasty stuff */
    }

    doSomething();
  }

- It's OK to omit braces for oneliners or even write oneliners on a single line:

  for (int i = 0; i < N; ++i)
    for (int j = 0; j < N; ++j)
      if (i == j)
        woot(j, i) = 0;

  if (foo()) return false;

- Single-line explanations of class methods should be written whenver possible,
  like this:

  /// Three slashes, stop with a full stop.
  inline void doNothing() const { }


4. Language style

Idiomatic, modern C++0x.

- Make good data structures. Inline.

- Use of "new" should entirely unneccessary. Consider std::shared_ptr<T>,
  std::make_shared<T>(...), std::array<T, n> etc.

- Use initialiser lists in constructors, and remember that we have uniform
  initialisation available when appropriate. 

- Use clever containers, e.g. std::unordered_map has O(1) access.

- The server is multithreaded, if you work with server.* and connection.*,
  make sure to guard access as necessary. Remember std::lock_guard and friends.

[To be expanded.]


5. Random things to think about in the future:


- In the ConnectionManager, std::unordered_map might be faster than std::map (constant vs. logarithmic lookup)
  ** Not that it would matter if there aren't thousands of clients

- In Server, Server::runInputProcessing() parses the raw data for each client into packets.
  Two things can happen: Either the packet is of fixed size, in which case we decide
  immediately if we have enough data, and if yes perform a mutexed extraction of the
  packet from the queue. Or the packet is of variable size, in which case we pass on
  the raw queue and the mutex to dispatchIfEnoughData(), which is responsible for
  mutexing the extraction if it decides to extract.

  Note that we COULD let that function set an additional variable that contains the
  minimum amount of data it needs before the next attempt; but unless there is strong
  evidence that there are lots of incomplete variable-length packets in the queue all
  the time, this is not worthwhile.

- ConnectionManager, Server: Every connection has its own mutex to guard its ingress
  data queue. Currently done with heap-allocated "shared_ptr<mutex>(new mutex)", if
  necessary this might be replaced by something more static and faster (but again,
  only if there is strong evidence that this is worthwhile).

- Maybe the classes Server and ConnectionManager could be merged. (Maybe not, though,
  as lots of modules only need ConnectionManager, not Server.)
